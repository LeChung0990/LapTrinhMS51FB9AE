                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _UART_Send_Data_PARM_2
                                     12 	.globl _UART_Open_PARM_2
                                     13 	.globl _MOSI
                                     14 	.globl _P00
                                     15 	.globl _MISO
                                     16 	.globl _P01
                                     17 	.globl _RXD_1
                                     18 	.globl _P02
                                     19 	.globl _P03
                                     20 	.globl _STADC
                                     21 	.globl _P04
                                     22 	.globl _P05
                                     23 	.globl _TXD
                                     24 	.globl _P06
                                     25 	.globl _RXD
                                     26 	.globl _P07
                                     27 	.globl _IT0
                                     28 	.globl _IE0
                                     29 	.globl _IT1
                                     30 	.globl _IE1
                                     31 	.globl _TR0
                                     32 	.globl _TF0
                                     33 	.globl _TR1
                                     34 	.globl _TF1
                                     35 	.globl _P10
                                     36 	.globl _P11
                                     37 	.globl _P12
                                     38 	.globl _SCL
                                     39 	.globl _P13
                                     40 	.globl _SDA
                                     41 	.globl _P14
                                     42 	.globl _P15
                                     43 	.globl _TXD_1
                                     44 	.globl _P16
                                     45 	.globl _P17
                                     46 	.globl _RI
                                     47 	.globl _TI
                                     48 	.globl _RB8
                                     49 	.globl _TB8
                                     50 	.globl _REN
                                     51 	.globl _SM2
                                     52 	.globl _SM1
                                     53 	.globl _FE
                                     54 	.globl _SM0
                                     55 	.globl _P20
                                     56 	.globl _EX0
                                     57 	.globl _ET0
                                     58 	.globl _EX1
                                     59 	.globl _ET1
                                     60 	.globl _ES
                                     61 	.globl _EBOD
                                     62 	.globl _EADC
                                     63 	.globl _EA
                                     64 	.globl _P30
                                     65 	.globl _PX0
                                     66 	.globl _PT0
                                     67 	.globl _PX1
                                     68 	.globl _PT1
                                     69 	.globl _PS
                                     70 	.globl _PBOD
                                     71 	.globl _PADC
                                     72 	.globl _I2CPX
                                     73 	.globl _AA
                                     74 	.globl _SI
                                     75 	.globl _STO
                                     76 	.globl _STA
                                     77 	.globl _I2CEN
                                     78 	.globl _CM_RL2
                                     79 	.globl _TR2
                                     80 	.globl _TF2
                                     81 	.globl _P
                                     82 	.globl _OV
                                     83 	.globl _RS0
                                     84 	.globl _RS1
                                     85 	.globl _F0
                                     86 	.globl _AC
                                     87 	.globl _CY
                                     88 	.globl _CLRPWM
                                     89 	.globl _PWMF
                                     90 	.globl _LOAD
                                     91 	.globl _PWMRUN
                                     92 	.globl _ADCHS0
                                     93 	.globl _ADCHS1
                                     94 	.globl _ADCHS2
                                     95 	.globl _ADCHS3
                                     96 	.globl _ETGSEL0
                                     97 	.globl _ETGSEL1
                                     98 	.globl _ADCS
                                     99 	.globl _ADCF
                                    100 	.globl _RI_1
                                    101 	.globl _TI_1
                                    102 	.globl _RB8_1
                                    103 	.globl _TB8_1
                                    104 	.globl _REN_1
                                    105 	.globl _SM2_1
                                    106 	.globl _SM1_1
                                    107 	.globl _FE_1
                                    108 	.globl _SM0_1
                                    109 	.globl _EIPH1
                                    110 	.globl _EIP1
                                    111 	.globl _PMD
                                    112 	.globl _PMEN
                                    113 	.globl _PDTCNT
                                    114 	.globl _PDTEN
                                    115 	.globl _SCON_1
                                    116 	.globl _EIPH
                                    117 	.globl _AINDIDS
                                    118 	.globl _SPDR
                                    119 	.globl _SPSR
                                    120 	.globl _SPCR2
                                    121 	.globl _SPCR
                                    122 	.globl _CAPCON4
                                    123 	.globl _CAPCON3
                                    124 	.globl _B
                                    125 	.globl _EIP
                                    126 	.globl _C2H
                                    127 	.globl _C2L
                                    128 	.globl _PIF
                                    129 	.globl _PIPEN
                                    130 	.globl _PINEN
                                    131 	.globl _PICON
                                    132 	.globl _ADCCON0
                                    133 	.globl _C1H
                                    134 	.globl _C1L
                                    135 	.globl _C0H
                                    136 	.globl _C0L
                                    137 	.globl _ADCDLY
                                    138 	.globl _ADCCON2
                                    139 	.globl _ADCCON1
                                    140 	.globl _ACC
                                    141 	.globl _PWMCON1
                                    142 	.globl _PIOCON0
                                    143 	.globl _PWM3L
                                    144 	.globl _PWM2L
                                    145 	.globl _PWM1L
                                    146 	.globl _PWM0L
                                    147 	.globl _PWMPL
                                    148 	.globl _PWMCON0
                                    149 	.globl _FBD
                                    150 	.globl _PNP
                                    151 	.globl _PWM3H
                                    152 	.globl _PWM2H
                                    153 	.globl _PWM1H
                                    154 	.globl _PWM0H
                                    155 	.globl _PWMPH
                                    156 	.globl _PSW
                                    157 	.globl _ADCMPH
                                    158 	.globl _ADCMPL
                                    159 	.globl _PWM5L
                                    160 	.globl _TH2
                                    161 	.globl _PWM4L
                                    162 	.globl _TL2
                                    163 	.globl _RCMP2H
                                    164 	.globl _RCMP2L
                                    165 	.globl _T2MOD
                                    166 	.globl _T2CON
                                    167 	.globl _TA
                                    168 	.globl _PIOCON1
                                    169 	.globl _RH3
                                    170 	.globl _PWM5H
                                    171 	.globl _RL3
                                    172 	.globl _PWM4H
                                    173 	.globl _T3CON
                                    174 	.globl _ADCRH
                                    175 	.globl _ADCRL
                                    176 	.globl _I2ADDR
                                    177 	.globl _I2CON
                                    178 	.globl _I2TOC
                                    179 	.globl _I2CLK
                                    180 	.globl _I2STAT
                                    181 	.globl _I2DAT
                                    182 	.globl _SADDR_1
                                    183 	.globl _SADEN_1
                                    184 	.globl _SADEN
                                    185 	.globl _IP
                                    186 	.globl _PWMINTC
                                    187 	.globl _IPH
                                    188 	.globl _P2S
                                    189 	.globl _P1SR
                                    190 	.globl _P1M2
                                    191 	.globl _P1S
                                    192 	.globl _P1M1
                                    193 	.globl _P0SR
                                    194 	.globl _P0M2
                                    195 	.globl _P0S
                                    196 	.globl _P0M1
                                    197 	.globl _P3
                                    198 	.globl _IAPCN
                                    199 	.globl _IAPFD
                                    200 	.globl _P3SR
                                    201 	.globl _P3M2
                                    202 	.globl _P3S
                                    203 	.globl _P3M1
                                    204 	.globl _BODCON1
                                    205 	.globl _WDCON
                                    206 	.globl _SADDR
                                    207 	.globl _IE
                                    208 	.globl _IAPAH
                                    209 	.globl _IAPAL
                                    210 	.globl _IAPUEN
                                    211 	.globl _IAPTRG
                                    212 	.globl _BODCON0
                                    213 	.globl _AUXR1
                                    214 	.globl _P2
                                    215 	.globl _CHPCON
                                    216 	.globl _EIE1
                                    217 	.globl _EIE
                                    218 	.globl _SBUF_1
                                    219 	.globl _SBUF
                                    220 	.globl _SCON
                                    221 	.globl _CKEN
                                    222 	.globl _CKSWT
                                    223 	.globl _CKDIV
                                    224 	.globl _CAPCON2
                                    225 	.globl _CAPCON1
                                    226 	.globl _CAPCON0
                                    227 	.globl _SFRS
                                    228 	.globl _P1
                                    229 	.globl _WKCON
                                    230 	.globl _CKCON
                                    231 	.globl _TH1
                                    232 	.globl _TH0
                                    233 	.globl _TL1
                                    234 	.globl _TL0
                                    235 	.globl _TMOD
                                    236 	.globl _TCON
                                    237 	.globl _PCON
                                    238 	.globl _RWK
                                    239 	.globl _RCTRIM1
                                    240 	.globl _RCTRIM0
                                    241 	.globl _DPH
                                    242 	.globl _DPL
                                    243 	.globl _SP
                                    244 	.globl _P0
                                    245 	.globl _UART_Open
                                    246 	.globl _UART_Send_Data
                                    247 	.globl _Receive_Data
                                    248 	.globl _UART0_EnableInterrupt
                                    249 	.globl _UART0_DisableInterrupt
                                    250 	.globl _UART0_ClearFlag
                                    251 	.globl _UART0_GetFlag
                                    252 	.globl _UART0_STRING
                                    253 	.globl _UART0_NUMBER
                                    254 ;--------------------------------------------------------
                                    255 ; special function registers
                                    256 ;--------------------------------------------------------
                                    257 	.area RSEG    (ABS,DATA)
      000000                        258 	.org 0x0000
                           000080   259 _P0	=	0x0080
                           000081   260 _SP	=	0x0081
                           000082   261 _DPL	=	0x0082
                           000083   262 _DPH	=	0x0083
                           000084   263 _RCTRIM0	=	0x0084
                           000085   264 _RCTRIM1	=	0x0085
                           000086   265 _RWK	=	0x0086
                           000087   266 _PCON	=	0x0087
                           000088   267 _TCON	=	0x0088
                           000089   268 _TMOD	=	0x0089
                           00008A   269 _TL0	=	0x008a
                           00008B   270 _TL1	=	0x008b
                           00008C   271 _TH0	=	0x008c
                           00008D   272 _TH1	=	0x008d
                           00008E   273 _CKCON	=	0x008e
                           00008F   274 _WKCON	=	0x008f
                           000090   275 _P1	=	0x0090
                           000091   276 _SFRS	=	0x0091
                           000092   277 _CAPCON0	=	0x0092
                           000093   278 _CAPCON1	=	0x0093
                           000094   279 _CAPCON2	=	0x0094
                           000095   280 _CKDIV	=	0x0095
                           000096   281 _CKSWT	=	0x0096
                           000097   282 _CKEN	=	0x0097
                           000098   283 _SCON	=	0x0098
                           000099   284 _SBUF	=	0x0099
                           00009A   285 _SBUF_1	=	0x009a
                           00009B   286 _EIE	=	0x009b
                           00009C   287 _EIE1	=	0x009c
                           00009F   288 _CHPCON	=	0x009f
                           0000A0   289 _P2	=	0x00a0
                           0000A2   290 _AUXR1	=	0x00a2
                           0000A3   291 _BODCON0	=	0x00a3
                           0000A4   292 _IAPTRG	=	0x00a4
                           0000A5   293 _IAPUEN	=	0x00a5
                           0000A6   294 _IAPAL	=	0x00a6
                           0000A7   295 _IAPAH	=	0x00a7
                           0000A8   296 _IE	=	0x00a8
                           0000A9   297 _SADDR	=	0x00a9
                           0000AA   298 _WDCON	=	0x00aa
                           0000AB   299 _BODCON1	=	0x00ab
                           0000AC   300 _P3M1	=	0x00ac
                           0000AC   301 _P3S	=	0x00ac
                           0000AD   302 _P3M2	=	0x00ad
                           0000AD   303 _P3SR	=	0x00ad
                           0000AE   304 _IAPFD	=	0x00ae
                           0000AF   305 _IAPCN	=	0x00af
                           0000B0   306 _P3	=	0x00b0
                           0000B1   307 _P0M1	=	0x00b1
                           0000B1   308 _P0S	=	0x00b1
                           0000B2   309 _P0M2	=	0x00b2
                           0000B2   310 _P0SR	=	0x00b2
                           0000B3   311 _P1M1	=	0x00b3
                           0000B3   312 _P1S	=	0x00b3
                           0000B4   313 _P1M2	=	0x00b4
                           0000B4   314 _P1SR	=	0x00b4
                           0000B5   315 _P2S	=	0x00b5
                           0000B7   316 _IPH	=	0x00b7
                           0000B7   317 _PWMINTC	=	0x00b7
                           0000B8   318 _IP	=	0x00b8
                           0000B9   319 _SADEN	=	0x00b9
                           0000BA   320 _SADEN_1	=	0x00ba
                           0000BB   321 _SADDR_1	=	0x00bb
                           0000BC   322 _I2DAT	=	0x00bc
                           0000BD   323 _I2STAT	=	0x00bd
                           0000BE   324 _I2CLK	=	0x00be
                           0000BF   325 _I2TOC	=	0x00bf
                           0000C0   326 _I2CON	=	0x00c0
                           0000C1   327 _I2ADDR	=	0x00c1
                           0000C2   328 _ADCRL	=	0x00c2
                           0000C3   329 _ADCRH	=	0x00c3
                           0000C4   330 _T3CON	=	0x00c4
                           0000C4   331 _PWM4H	=	0x00c4
                           0000C5   332 _RL3	=	0x00c5
                           0000C5   333 _PWM5H	=	0x00c5
                           0000C6   334 _RH3	=	0x00c6
                           0000C6   335 _PIOCON1	=	0x00c6
                           0000C7   336 _TA	=	0x00c7
                           0000C8   337 _T2CON	=	0x00c8
                           0000C9   338 _T2MOD	=	0x00c9
                           0000CA   339 _RCMP2L	=	0x00ca
                           0000CB   340 _RCMP2H	=	0x00cb
                           0000CC   341 _TL2	=	0x00cc
                           0000CC   342 _PWM4L	=	0x00cc
                           0000CD   343 _TH2	=	0x00cd
                           0000CD   344 _PWM5L	=	0x00cd
                           0000CE   345 _ADCMPL	=	0x00ce
                           0000CF   346 _ADCMPH	=	0x00cf
                           0000D0   347 _PSW	=	0x00d0
                           0000D1   348 _PWMPH	=	0x00d1
                           0000D2   349 _PWM0H	=	0x00d2
                           0000D3   350 _PWM1H	=	0x00d3
                           0000D4   351 _PWM2H	=	0x00d4
                           0000D5   352 _PWM3H	=	0x00d5
                           0000D6   353 _PNP	=	0x00d6
                           0000D7   354 _FBD	=	0x00d7
                           0000D8   355 _PWMCON0	=	0x00d8
                           0000D9   356 _PWMPL	=	0x00d9
                           0000DA   357 _PWM0L	=	0x00da
                           0000DB   358 _PWM1L	=	0x00db
                           0000DC   359 _PWM2L	=	0x00dc
                           0000DD   360 _PWM3L	=	0x00dd
                           0000DE   361 _PIOCON0	=	0x00de
                           0000DF   362 _PWMCON1	=	0x00df
                           0000E0   363 _ACC	=	0x00e0
                           0000E1   364 _ADCCON1	=	0x00e1
                           0000E2   365 _ADCCON2	=	0x00e2
                           0000E3   366 _ADCDLY	=	0x00e3
                           0000E4   367 _C0L	=	0x00e4
                           0000E5   368 _C0H	=	0x00e5
                           0000E6   369 _C1L	=	0x00e6
                           0000E7   370 _C1H	=	0x00e7
                           0000E8   371 _ADCCON0	=	0x00e8
                           0000E9   372 _PICON	=	0x00e9
                           0000EA   373 _PINEN	=	0x00ea
                           0000EB   374 _PIPEN	=	0x00eb
                           0000EC   375 _PIF	=	0x00ec
                           0000ED   376 _C2L	=	0x00ed
                           0000EE   377 _C2H	=	0x00ee
                           0000EF   378 _EIP	=	0x00ef
                           0000F0   379 _B	=	0x00f0
                           0000F1   380 _CAPCON3	=	0x00f1
                           0000F2   381 _CAPCON4	=	0x00f2
                           0000F3   382 _SPCR	=	0x00f3
                           0000F3   383 _SPCR2	=	0x00f3
                           0000F4   384 _SPSR	=	0x00f4
                           0000F5   385 _SPDR	=	0x00f5
                           0000F6   386 _AINDIDS	=	0x00f6
                           0000F7   387 _EIPH	=	0x00f7
                           0000F8   388 _SCON_1	=	0x00f8
                           0000F9   389 _PDTEN	=	0x00f9
                           0000FA   390 _PDTCNT	=	0x00fa
                           0000FB   391 _PMEN	=	0x00fb
                           0000FC   392 _PMD	=	0x00fc
                           0000FE   393 _EIP1	=	0x00fe
                           0000FF   394 _EIPH1	=	0x00ff
                                    395 ;--------------------------------------------------------
                                    396 ; special function bits
                                    397 ;--------------------------------------------------------
                                    398 	.area RSEG    (ABS,DATA)
      000000                        399 	.org 0x0000
                           0000FF   400 _SM0_1	=	0x00ff
                           0000FF   401 _FE_1	=	0x00ff
                           0000FE   402 _SM1_1	=	0x00fe
                           0000FD   403 _SM2_1	=	0x00fd
                           0000FC   404 _REN_1	=	0x00fc
                           0000FB   405 _TB8_1	=	0x00fb
                           0000FA   406 _RB8_1	=	0x00fa
                           0000F9   407 _TI_1	=	0x00f9
                           0000F8   408 _RI_1	=	0x00f8
                           0000EF   409 _ADCF	=	0x00ef
                           0000EE   410 _ADCS	=	0x00ee
                           0000ED   411 _ETGSEL1	=	0x00ed
                           0000EC   412 _ETGSEL0	=	0x00ec
                           0000EB   413 _ADCHS3	=	0x00eb
                           0000EA   414 _ADCHS2	=	0x00ea
                           0000E9   415 _ADCHS1	=	0x00e9
                           0000E8   416 _ADCHS0	=	0x00e8
                           0000DF   417 _PWMRUN	=	0x00df
                           0000DE   418 _LOAD	=	0x00de
                           0000DD   419 _PWMF	=	0x00dd
                           0000DC   420 _CLRPWM	=	0x00dc
                           0000D7   421 _CY	=	0x00d7
                           0000D6   422 _AC	=	0x00d6
                           0000D5   423 _F0	=	0x00d5
                           0000D4   424 _RS1	=	0x00d4
                           0000D3   425 _RS0	=	0x00d3
                           0000D2   426 _OV	=	0x00d2
                           0000D0   427 _P	=	0x00d0
                           0000CF   428 _TF2	=	0x00cf
                           0000CA   429 _TR2	=	0x00ca
                           0000C8   430 _CM_RL2	=	0x00c8
                           0000C6   431 _I2CEN	=	0x00c6
                           0000C5   432 _STA	=	0x00c5
                           0000C4   433 _STO	=	0x00c4
                           0000C3   434 _SI	=	0x00c3
                           0000C2   435 _AA	=	0x00c2
                           0000C0   436 _I2CPX	=	0x00c0
                           0000BE   437 _PADC	=	0x00be
                           0000BD   438 _PBOD	=	0x00bd
                           0000BC   439 _PS	=	0x00bc
                           0000BB   440 _PT1	=	0x00bb
                           0000BA   441 _PX1	=	0x00ba
                           0000B9   442 _PT0	=	0x00b9
                           0000B8   443 _PX0	=	0x00b8
                           0000B0   444 _P30	=	0x00b0
                           0000AF   445 _EA	=	0x00af
                           0000AE   446 _EADC	=	0x00ae
                           0000AD   447 _EBOD	=	0x00ad
                           0000AC   448 _ES	=	0x00ac
                           0000AB   449 _ET1	=	0x00ab
                           0000AA   450 _EX1	=	0x00aa
                           0000A9   451 _ET0	=	0x00a9
                           0000A8   452 _EX0	=	0x00a8
                           0000A0   453 _P20	=	0x00a0
                           00009F   454 _SM0	=	0x009f
                           00009F   455 _FE	=	0x009f
                           00009E   456 _SM1	=	0x009e
                           00009D   457 _SM2	=	0x009d
                           00009C   458 _REN	=	0x009c
                           00009B   459 _TB8	=	0x009b
                           00009A   460 _RB8	=	0x009a
                           000099   461 _TI	=	0x0099
                           000098   462 _RI	=	0x0098
                           000097   463 _P17	=	0x0097
                           000096   464 _P16	=	0x0096
                           000096   465 _TXD_1	=	0x0096
                           000095   466 _P15	=	0x0095
                           000094   467 _P14	=	0x0094
                           000094   468 _SDA	=	0x0094
                           000093   469 _P13	=	0x0093
                           000093   470 _SCL	=	0x0093
                           000092   471 _P12	=	0x0092
                           000091   472 _P11	=	0x0091
                           000090   473 _P10	=	0x0090
                           00008F   474 _TF1	=	0x008f
                           00008E   475 _TR1	=	0x008e
                           00008D   476 _TF0	=	0x008d
                           00008C   477 _TR0	=	0x008c
                           00008B   478 _IE1	=	0x008b
                           00008A   479 _IT1	=	0x008a
                           000089   480 _IE0	=	0x0089
                           000088   481 _IT0	=	0x0088
                           000087   482 _P07	=	0x0087
                           000087   483 _RXD	=	0x0087
                           000086   484 _P06	=	0x0086
                           000086   485 _TXD	=	0x0086
                           000085   486 _P05	=	0x0085
                           000084   487 _P04	=	0x0084
                           000084   488 _STADC	=	0x0084
                           000083   489 _P03	=	0x0083
                           000082   490 _P02	=	0x0082
                           000082   491 _RXD_1	=	0x0082
                           000081   492 _P01	=	0x0081
                           000081   493 _MISO	=	0x0081
                           000080   494 _P00	=	0x0080
                           000080   495 _MOSI	=	0x0080
                                    496 ;--------------------------------------------------------
                                    497 ; overlayable register banks
                                    498 ;--------------------------------------------------------
                                    499 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        500 	.ds 8
                                    501 ;--------------------------------------------------------
                                    502 ; internal ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area DSEG    (DATA)
      000000                        505 _UART0_NUMBER_digit_65536_36:
      000000                        506 	.ds 5
                                    507 ;--------------------------------------------------------
                                    508 ; overlayable items in internal ram
                                    509 ;--------------------------------------------------------
                                    510 	.area	OSEG    (OVR,DATA)
      000000                        511 _UART_Open_PARM_2:
      000000                        512 	.ds 2
                                    513 	.area	OSEG    (OVR,DATA)
      000000                        514 _UART_Send_Data_PARM_2:
      000000                        515 	.ds 1
                                    516 	.area	OSEG    (OVR,DATA)
                                    517 	.area	OSEG    (OVR,DATA)
                                    518 	.area	OSEG    (OVR,DATA)
                                    519 ;--------------------------------------------------------
                                    520 ; indirectly addressable internal ram data
                                    521 ;--------------------------------------------------------
                                    522 	.area ISEG    (DATA)
                                    523 ;--------------------------------------------------------
                                    524 ; absolute internal ram data
                                    525 ;--------------------------------------------------------
                                    526 	.area IABS    (ABS,DATA)
                                    527 	.area IABS    (ABS,DATA)
                                    528 ;--------------------------------------------------------
                                    529 ; bit data
                                    530 ;--------------------------------------------------------
                                    531 	.area BSEG    (BIT)
                                    532 ;--------------------------------------------------------
                                    533 ; paged external ram data
                                    534 ;--------------------------------------------------------
                                    535 	.area PSEG    (PAG,XDATA)
                                    536 ;--------------------------------------------------------
                                    537 ; uninitialized external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area XSEG    (XDATA)
                                    540 ;--------------------------------------------------------
                                    541 ; absolute external ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area XABS    (ABS,XDATA)
                                    544 ;--------------------------------------------------------
                                    545 ; initialized external ram data
                                    546 ;--------------------------------------------------------
                                    547 	.area XISEG   (XDATA)
                                    548 	.area HOME    (CODE)
                                    549 	.area GSINIT0 (CODE)
                                    550 	.area GSINIT1 (CODE)
                                    551 	.area GSINIT2 (CODE)
                                    552 	.area GSINIT3 (CODE)
                                    553 	.area GSINIT4 (CODE)
                                    554 	.area GSINIT5 (CODE)
                                    555 	.area GSINIT  (CODE)
                                    556 	.area GSFINAL (CODE)
                                    557 	.area CSEG    (CODE)
                                    558 ;--------------------------------------------------------
                                    559 ; global & static initialisations
                                    560 ;--------------------------------------------------------
                                    561 	.area HOME    (CODE)
                                    562 	.area GSINIT  (CODE)
                                    563 	.area GSFINAL (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 ;--------------------------------------------------------
                                    566 ; Home
                                    567 ;--------------------------------------------------------
                                    568 	.area HOME    (CODE)
                                    569 	.area HOME    (CODE)
                                    570 ;--------------------------------------------------------
                                    571 ; code
                                    572 ;--------------------------------------------------------
                                    573 	.area CSEG    (CODE)
                                    574 ;------------------------------------------------------------
                                    575 ;Allocation info for local variables in function 'UART_Open'
                                    576 ;------------------------------------------------------------
                                    577 ;ValueBaudrate             Allocated with name '_UART_Open_PARM_2'
                                    578 ;u8UARTPort                Allocated to registers r7 
                                    579 ;------------------------------------------------------------
                                    580 ;	lib/src/uart.c:9: void UART_Open(CONFIG_CLOCK_UART u8UARTPort, BAUD_VALUE_TIME3 ValueBaudrate)
                                    581 ;	-----------------------------------------
                                    582 ;	 function UART_Open
                                    583 ;	-----------------------------------------
      000000                        584 _UART_Open:
                           000007   585 	ar7 = 0x07
                           000006   586 	ar6 = 0x06
                           000005   587 	ar5 = 0x05
                           000004   588 	ar4 = 0x04
                           000003   589 	ar3 = 0x03
                           000002   590 	ar2 = 0x02
                           000001   591 	ar1 = 0x01
                           000000   592 	ar0 = 0x00
      000000 AF 82            [24]  593 	mov	r7,dpl
                                    594 ;	lib/src/uart.c:11: switch (u8UARTPort)
      000002 BF 00 02         [24]  595 	cjne	r7,#0x00,00119$
      000005 80 0A            [24]  596 	sjmp	00101$
      000007                        597 00119$:
      000007 BF 01 02         [24]  598 	cjne	r7,#0x01,00120$
      00000A 80 17            [24]  599 	sjmp	00102$
      00000C                        600 00120$:
                                    601 ;	lib/src/uart.c:13: case UART0_Timer1:
      00000C BF 02 39         [24]  602 	cjne	r7,#0x02,00105$
      00000F 80 28            [24]  603 	sjmp	00103$
      000011                        604 00101$:
                                    605 ;	lib/src/uart.c:14: SCON = 0x50;   // UART0 Mode1,REN=1,TI=1
      000011 75 98 50         [24]  606 	mov	_SCON,#0x50
                                    607 ;	lib/src/uart.c:15: TMOD |= 0x20;  // Timer1 Mode1
      000014 43 89 20         [24]  608 	orl	_TMOD,#0x20
                                    609 ;	lib/src/uart.c:16: set_PCON_SMOD; // UART0 Double Rate Enable
      000017 43 87 80         [24]  610 	orl	_PCON,#0x80
                                    611 ;	lib/src/uart.c:17: set_CKCON_T1M;
      00001A 43 8E 10         [24]  612 	orl	_CKCON,#0x10
                                    613 ;	lib/src/uart.c:18: clr_T3CON_BRCK; // Serial port 0 baud rate clock source = Timer1
      00001D 53 C4 DF         [24]  614 	anl	_T3CON,#0xdf
                                    615 ;	lib/src/uart.c:20: set_TCON_TR1;
                                    616 ;	assignBit
      000020 D2 8E            [12]  617 	setb	_TR1
                                    618 ;	lib/src/uart.c:21: break;
                                    619 ;	lib/src/uart.c:23: case UART0_Timer3:
      000022 22               [24]  620 	ret
      000023                        621 00102$:
                                    622 ;	lib/src/uart.c:24: SCON = 0x50;    // UART0 Mode1,REN=1,TI=1
      000023 75 98 50         [24]  623 	mov	_SCON,#0x50
                                    624 ;	lib/src/uart.c:25: clr_PCON_SMOD;  // UART0 Double Rate Enable
      000026 53 87 7F         [24]  625 	anl	_PCON,#0x7f
                                    626 ;	lib/src/uart.c:26: T3CON &= 0xF8;  // T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1)
      000029 53 C4 F8         [24]  627 	anl	_T3CON,#0xf8
                                    628 ;	lib/src/uart.c:27: set_T3CON_BRCK; // UART0 baud rate clock source = Timer3
      00002C 43 C4 20         [24]  629 	orl	_T3CON,#0x20
                                    630 ;	lib/src/uart.c:28: RH3 = HIBYTE(ValueBaudrate);
      00002F 85*01 C6         [24]  631 	mov	_RH3,(_UART_Open_PARM_2 + 1)
                                    632 ;	lib/src/uart.c:29: RL3 = LOBYTE(ValueBaudrate);
      000032 85*00 C5         [24]  633 	mov	_RL3,_UART_Open_PARM_2
                                    634 ;	lib/src/uart.c:30: set_T3CON_TR3; // Trigger Timer3
      000035 43 C4 08         [24]  635 	orl	_T3CON,#0x08
                                    636 ;	lib/src/uart.c:31: break;
                                    637 ;	lib/src/uart.c:33: case UART1_Timer3:
      000038 22               [24]  638 	ret
      000039                        639 00103$:
                                    640 ;	lib/src/uart.c:34: SCON_1 = 0x50; // UART1 Mode1,REN_1=1,TI_1=1
      000039 75 F8 50         [24]  641 	mov	_SCON_1,#0x50
                                    642 ;	lib/src/uart.c:35: T3CON = 0x80;  // T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1), UART1 in MODE 1
      00003C 75 C4 80         [24]  643 	mov	_T3CON,#0x80
                                    644 ;	lib/src/uart.c:36: RH3 = HIBYTE(ValueBaudrate);
      00003F 85*01 C6         [24]  645 	mov	_RH3,(_UART_Open_PARM_2 + 1)
                                    646 ;	lib/src/uart.c:37: RL3 = LOBYTE(ValueBaudrate);
      000042 85*00 C5         [24]  647 	mov	_RL3,_UART_Open_PARM_2
                                    648 ;	lib/src/uart.c:38: set_T3CON_TR3; // Trigger Timer3
      000045 43 C4 08         [24]  649 	orl	_T3CON,#0x08
                                    650 ;	lib/src/uart.c:40: }
      000048                        651 00105$:
                                    652 ;	lib/src/uart.c:41: }
      000048 22               [24]  653 	ret
                                    654 ;------------------------------------------------------------
                                    655 ;Allocation info for local variables in function 'UART_Send_Data'
                                    656 ;------------------------------------------------------------
                                    657 ;u8Data                    Allocated with name '_UART_Send_Data_PARM_2'
                                    658 ;UARTPort                  Allocated to registers r7 
                                    659 ;------------------------------------------------------------
                                    660 ;	lib/src/uart.c:43: void UART_Send_Data(CONFIG_SELECT_UART UARTPort, uint8_t u8Data)
                                    661 ;	-----------------------------------------
                                    662 ;	 function UART_Send_Data
                                    663 ;	-----------------------------------------
      000049                        664 _UART_Send_Data:
      000049 AF 82            [24]  665 	mov	r7,dpl
                                    666 ;	lib/src/uart.c:45: switch (UARTPort)
      00004B BF 00 02         [24]  667 	cjne	r7,#0x00,00114$
      00004E 80 05            [24]  668 	sjmp	00101$
      000050                        669 00114$:
                                    670 ;	lib/src/uart.c:47: case UART0:
      000050 BF 01 09         [24]  671 	cjne	r7,#0x01,00104$
      000053 80 04            [24]  672 	sjmp	00102$
      000055                        673 00101$:
                                    674 ;	lib/src/uart.c:48: SBUF = u8Data;
      000055 85*00 99         [24]  675 	mov	_SBUF,_UART_Send_Data_PARM_2
                                    676 ;	lib/src/uart.c:49: break;
                                    677 ;	lib/src/uart.c:50: case UART1:
      000058 22               [24]  678 	ret
      000059                        679 00102$:
                                    680 ;	lib/src/uart.c:51: SBUF_1 = u8Data;
      000059 85*00 9A         [24]  681 	mov	_SBUF_1,_UART_Send_Data_PARM_2
                                    682 ;	lib/src/uart.c:53: }
      00005C                        683 00104$:
                                    684 ;	lib/src/uart.c:54: }
      00005C 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'Receive_Data'
                                    688 ;------------------------------------------------------------
                                    689 ;UARTPort                  Allocated to registers r7 
                                    690 ;u8Receive                 Allocated to registers r6 
                                    691 ;------------------------------------------------------------
                                    692 ;	lib/src/uart.c:56: uint8_t Receive_Data(CONFIG_SELECT_UART UARTPort)
                                    693 ;	-----------------------------------------
                                    694 ;	 function Receive_Data
                                    695 ;	-----------------------------------------
      00005D                        696 _Receive_Data:
      00005D AF 82            [24]  697 	mov	r7,dpl
                                    698 ;	lib/src/uart.c:58: uint8_t u8Receive = 0;
      00005F 7E 00            [12]  699 	mov	r6,#0x00
                                    700 ;	lib/src/uart.c:59: switch (UARTPort)
      000061 BF 00 02         [24]  701 	cjne	r7,#0x00,00136$
      000064 80 05            [24]  702 	sjmp	00102$
      000066                        703 00136$:
                                    704 ;	lib/src/uart.c:62: while (!RI)
      000066 BF 01 12         [24]  705 	cjne	r7,#0x01,00109$
      000069 80 09            [24]  706 	sjmp	00106$
      00006B                        707 00102$:
      00006B 30 98 FD         [24]  708 	jnb	_RI,00102$
                                    709 ;	lib/src/uart.c:65: u8Receive = SBUF;
      00006E AE 99            [24]  710 	mov	r6,_SBUF
                                    711 ;	lib/src/uart.c:66: RI = 0;
                                    712 ;	assignBit
      000070 C2 98            [12]  713 	clr	_RI
                                    714 ;	lib/src/uart.c:67: break;
                                    715 ;	lib/src/uart.c:69: while (!RI_1)
      000072 80 07            [24]  716 	sjmp	00109$
      000074                        717 00106$:
      000074 30 F8 FD         [24]  718 	jnb	_RI_1,00106$
                                    719 ;	lib/src/uart.c:72: u8Receive = SBUF_1;
      000077 AE 9A            [24]  720 	mov	r6,_SBUF_1
                                    721 ;	lib/src/uart.c:73: RI_1 = 0;
                                    722 ;	assignBit
      000079 C2 F8            [12]  723 	clr	_RI_1
                                    724 ;	lib/src/uart.c:75: }
      00007B                        725 00109$:
                                    726 ;	lib/src/uart.c:76: return (u8Receive);
      00007B 8E 82            [24]  727 	mov	dpl,r6
                                    728 ;	lib/src/uart.c:77: }
      00007D 22               [24]  729 	ret
                                    730 ;------------------------------------------------------------
                                    731 ;Allocation info for local variables in function 'UART0_EnableInterrupt'
                                    732 ;------------------------------------------------------------
                                    733 ;	lib/src/uart.c:78: void UART0_EnableInterrupt(void)
                                    734 ;	-----------------------------------------
                                    735 ;	 function UART0_EnableInterrupt
                                    736 ;	-----------------------------------------
      00007E                        737 _UART0_EnableInterrupt:
                                    738 ;	lib/src/uart.c:80: ES = 1;
                                    739 ;	assignBit
      00007E D2 AC            [12]  740 	setb	_ES
                                    741 ;	lib/src/uart.c:81: }
      000080 22               [24]  742 	ret
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'UART0_DisableInterrupt'
                                    745 ;------------------------------------------------------------
                                    746 ;	lib/src/uart.c:83: void UART0_DisableInterrupt(void)
                                    747 ;	-----------------------------------------
                                    748 ;	 function UART0_DisableInterrupt
                                    749 ;	-----------------------------------------
      000081                        750 _UART0_DisableInterrupt:
                                    751 ;	lib/src/uart.c:85: ES = 0;
                                    752 ;	assignBit
      000081 C2 AC            [12]  753 	clr	_ES
                                    754 ;	lib/src/uart.c:86: }
      000083 22               [24]  755 	ret
                                    756 ;------------------------------------------------------------
                                    757 ;Allocation info for local variables in function 'UART0_ClearFlag'
                                    758 ;------------------------------------------------------------
                                    759 ;u8Flag                    Allocated to registers r7 
                                    760 ;------------------------------------------------------------
                                    761 ;	lib/src/uart.c:87: void UART0_ClearFlag(uint8_t u8Flag)
                                    762 ;	-----------------------------------------
                                    763 ;	 function UART0_ClearFlag
                                    764 ;	-----------------------------------------
      000084                        765 _UART0_ClearFlag:
                                    766 ;	lib/src/uart.c:89: SCON &= ~(u8Flag);
      000084 E5 82            [12]  767 	mov	a,dpl
      000086 F4               [12]  768 	cpl	a
      000087 52 98            [12]  769 	anl	_SCON,a
                                    770 ;	lib/src/uart.c:90: }
      000089 22               [24]  771 	ret
                                    772 ;------------------------------------------------------------
                                    773 ;Allocation info for local variables in function 'UART0_GetFlag'
                                    774 ;------------------------------------------------------------
                                    775 ;u8Flag                    Allocated to registers r7 
                                    776 ;------------------------------------------------------------
                                    777 ;	lib/src/uart.c:91: uint8_t UART0_GetFlag(uint8_t u8Flag)
                                    778 ;	-----------------------------------------
                                    779 ;	 function UART0_GetFlag
                                    780 ;	-----------------------------------------
      00008A                        781 _UART0_GetFlag:
                                    782 ;	lib/src/uart.c:93: if (SCON & (u8Flag))
      00008A E5 82            [12]  783 	mov	a,dpl
      00008C 55 98            [12]  784 	anl	a,_SCON
      00008E 60 04            [24]  785 	jz	00102$
                                    786 ;	lib/src/uart.c:95: return 1;
      000090 75 82 01         [24]  787 	mov	dpl,#0x01
      000093 22               [24]  788 	ret
      000094                        789 00102$:
                                    790 ;	lib/src/uart.c:99: return 0;
      000094 75 82 00         [24]  791 	mov	dpl,#0x00
                                    792 ;	lib/src/uart.c:101: }
      000097 22               [24]  793 	ret
                                    794 ;------------------------------------------------------------
                                    795 ;Allocation info for local variables in function 'UART0_STRING'
                                    796 ;------------------------------------------------------------
                                    797 ;cy                        Allocated to registers 
                                    798 ;------------------------------------------------------------
                                    799 ;	lib/src/uart.c:102: void UART0_STRING(const char *cy)
                                    800 ;	-----------------------------------------
                                    801 ;	 function UART0_STRING
                                    802 ;	-----------------------------------------
      000098                        803 _UART0_STRING:
      000098 AD 82            [24]  804 	mov	r5,dpl
      00009A AE 83            [24]  805 	mov	r6,dph
      00009C AF F0            [24]  806 	mov	r7,b
                                    807 ;	lib/src/uart.c:104: while (*cy)
      00009E                        808 00104$:
      00009E 8D 82            [24]  809 	mov	dpl,r5
      0000A0 8E 83            [24]  810 	mov	dph,r6
      0000A2 8F F0            [24]  811 	mov	b,r7
      0000A4 12r00r00         [24]  812 	lcall	__gptrget
      0000A7 FC               [12]  813 	mov	r4,a
      0000A8 60 43            [24]  814 	jz	00107$
                                    815 ;	lib/src/uart.c:106: UART_Send_Data(UART0, (*cy));
      0000AA 8C*00            [24]  816 	mov	_UART_Send_Data_PARM_2,r4
      0000AC 75 82 00         [24]  817 	mov	dpl,#0x00
      0000AF C0 07            [24]  818 	push	ar7
      0000B1 C0 06            [24]  819 	push	ar6
      0000B3 C0 05            [24]  820 	push	ar5
      0000B5 12r00r49         [24]  821 	lcall	_UART_Send_Data
      0000B8 D0 05            [24]  822 	pop	ar5
      0000BA D0 06            [24]  823 	pop	ar6
      0000BC D0 07            [24]  824 	pop	ar7
                                    825 ;	lib/src/uart.c:107: while (UART0_GetFlag(UART0_TX_FLAG) == 0)
      0000BE                        826 00101$:
      0000BE 75 82 02         [24]  827 	mov	dpl,#0x02
      0000C1 C0 07            [24]  828 	push	ar7
      0000C3 C0 06            [24]  829 	push	ar6
      0000C5 C0 05            [24]  830 	push	ar5
      0000C7 12r00r8A         [24]  831 	lcall	_UART0_GetFlag
      0000CA E5 82            [12]  832 	mov	a,dpl
      0000CC D0 05            [24]  833 	pop	ar5
      0000CE D0 06            [24]  834 	pop	ar6
      0000D0 D0 07            [24]  835 	pop	ar7
      0000D2 60 EA            [24]  836 	jz	00101$
                                    837 ;	lib/src/uart.c:110: UART0_ClearFlag(UART0_TX_FLAG);
      0000D4 75 82 02         [24]  838 	mov	dpl,#0x02
      0000D7 C0 07            [24]  839 	push	ar7
      0000D9 C0 06            [24]  840 	push	ar6
      0000DB C0 05            [24]  841 	push	ar5
      0000DD 12r00r84         [24]  842 	lcall	_UART0_ClearFlag
      0000E0 D0 05            [24]  843 	pop	ar5
      0000E2 D0 06            [24]  844 	pop	ar6
      0000E4 D0 07            [24]  845 	pop	ar7
                                    846 ;	lib/src/uart.c:111: cy++;
      0000E6 0D               [12]  847 	inc	r5
      0000E7 BD 00 B4         [24]  848 	cjne	r5,#0x00,00104$
      0000EA 0E               [12]  849 	inc	r6
      0000EB 80 B1            [24]  850 	sjmp	00104$
      0000ED                        851 00107$:
                                    852 ;	lib/src/uart.c:113: }
      0000ED 22               [24]  853 	ret
                                    854 ;------------------------------------------------------------
                                    855 ;Allocation info for local variables in function 'UART0_NUMBER'
                                    856 ;------------------------------------------------------------
                                    857 ;number                    Allocated to registers r6 r7 
                                    858 ;count                     Allocated to registers r5 
                                    859 ;digit                     Allocated with name '_UART0_NUMBER_digit_65536_36'
                                    860 ;------------------------------------------------------------
                                    861 ;	lib/src/uart.c:114: void UART0_NUMBER(int number)
                                    862 ;	-----------------------------------------
                                    863 ;	 function UART0_NUMBER
                                    864 ;	-----------------------------------------
      0000EE                        865 _UART0_NUMBER:
      0000EE AE 82            [24]  866 	mov	r6,dpl
      0000F0 AF 83            [24]  867 	mov	r7,dph
                                    868 ;	lib/src/uart.c:116: char count = 0;
      0000F2 7D 00            [12]  869 	mov	r5,#0x00
                                    870 ;	lib/src/uart.c:117: char digit[5] = "";
      0000F4 8D*00            [24]  871 	mov	_UART0_NUMBER_digit_65536_36,r5
      0000F6 8D*01            [24]  872 	mov	(_UART0_NUMBER_digit_65536_36 + 0x0001),r5
      0000F8 8D*02            [24]  873 	mov	(_UART0_NUMBER_digit_65536_36 + 0x0002),r5
      0000FA 8D*03            [24]  874 	mov	(_UART0_NUMBER_digit_65536_36 + 0x0003),r5
      0000FC 8D*04            [24]  875 	mov	(_UART0_NUMBER_digit_65536_36 + 0x0004),r5
                                    876 ;	lib/src/uart.c:118: if (number == 0)
      0000FE EE               [12]  877 	mov	a,r6
      0000FF 4F               [12]  878 	orl	a,r7
                                    879 ;	lib/src/uart.c:120: digit[0] = 0;
      000100 70 04            [24]  880 	jnz	00116$
      000102 F5*00            [12]  881 	mov	_UART0_NUMBER_digit_65536_36,a
                                    882 ;	lib/src/uart.c:121: count = 1;
      000104 7D 01            [12]  883 	mov	r5,#0x01
                                    884 ;	lib/src/uart.c:123: while (number != 0)
      000106                        885 00116$:
      000106                        886 00103$:
      000106 EE               [12]  887 	mov	a,r6
      000107 4F               [12]  888 	orl	a,r7
      000108 60 3D            [24]  889 	jz	00120$
                                    890 ;	lib/src/uart.c:125: digit[count] = number % 10; // lay chu so ngoai cung xxxx8;
      00010A ED               [12]  891 	mov	a,r5
      00010B 24r00            [12]  892 	add	a,#_UART0_NUMBER_digit_65536_36
      00010D F9               [12]  893 	mov	r1,a
      00010E 75*00 0A         [24]  894 	mov	__modsint_PARM_2,#0x0a
      000111 75*01 00         [24]  895 	mov	(__modsint_PARM_2 + 1),#0x00
      000114 8E 82            [24]  896 	mov	dpl,r6
      000116 8F 83            [24]  897 	mov	dph,r7
      000118 C0 07            [24]  898 	push	ar7
      00011A C0 06            [24]  899 	push	ar6
      00011C C0 05            [24]  900 	push	ar5
      00011E C0 01            [24]  901 	push	ar1
      000120 12r00r00         [24]  902 	lcall	__modsint
      000123 AB 82            [24]  903 	mov	r3,dpl
      000125 D0 01            [24]  904 	pop	ar1
      000127 D0 05            [24]  905 	pop	ar5
      000129 D0 06            [24]  906 	pop	ar6
      00012B D0 07            [24]  907 	pop	ar7
      00012D A7 03            [24]  908 	mov	@r1,ar3
                                    909 ;	lib/src/uart.c:126: ++count;
      00012F 0D               [12]  910 	inc	r5
                                    911 ;	lib/src/uart.c:127: number = number / 10; // chia so number cho 10 de bo so ngoai cung xxxx
      000130 75*00 0A         [24]  912 	mov	__divsint_PARM_2,#0x0a
      000133 75*01 00         [24]  913 	mov	(__divsint_PARM_2 + 1),#0x00
      000136 8E 82            [24]  914 	mov	dpl,r6
      000138 8F 83            [24]  915 	mov	dph,r7
      00013A C0 05            [24]  916 	push	ar5
      00013C 12r00r00         [24]  917 	lcall	__divsint
      00013F AE 82            [24]  918 	mov	r6,dpl
      000141 AF 83            [24]  919 	mov	r7,dph
      000143 D0 05            [24]  920 	pop	ar5
                                    921 ;	lib/src/uart.c:129: while (count != 0)
      000145 80 BF            [24]  922 	sjmp	00103$
      000147                        923 00120$:
      000147 8D 07            [24]  924 	mov	ar7,r5
      000149                        925 00109$:
      000149 EF               [12]  926 	mov	a,r7
      00014A 60 33            [24]  927 	jz	00112$
                                    928 ;	lib/src/uart.c:132: UART_Send_Data(UART0, digit[count - 1] + 0x30);
      00014C 8F 06            [24]  929 	mov	ar6,r7
      00014E EE               [12]  930 	mov	a,r6
      00014F 14               [12]  931 	dec	a
      000150 24r00            [12]  932 	add	a,#_UART0_NUMBER_digit_65536_36
      000152 F9               [12]  933 	mov	r1,a
      000153 87 06            [24]  934 	mov	ar6,@r1
      000155 74 30            [12]  935 	mov	a,#0x30
      000157 2E               [12]  936 	add	a,r6
      000158 F5*00            [12]  937 	mov	_UART_Send_Data_PARM_2,a
      00015A 75 82 00         [24]  938 	mov	dpl,#0x00
      00015D C0 07            [24]  939 	push	ar7
      00015F 12r00r49         [24]  940 	lcall	_UART_Send_Data
      000162 D0 07            [24]  941 	pop	ar7
                                    942 ;	lib/src/uart.c:133: while (UART0_GetFlag(UART0_TX_FLAG) == 0)
      000164                        943 00106$:
      000164 75 82 02         [24]  944 	mov	dpl,#0x02
      000167 C0 07            [24]  945 	push	ar7
      000169 12r00r8A         [24]  946 	lcall	_UART0_GetFlag
      00016C E5 82            [12]  947 	mov	a,dpl
      00016E D0 07            [24]  948 	pop	ar7
      000170 60 F2            [24]  949 	jz	00106$
                                    950 ;	lib/src/uart.c:136: UART0_ClearFlag(UART0_TX_FLAG);
      000172 75 82 02         [24]  951 	mov	dpl,#0x02
      000175 C0 07            [24]  952 	push	ar7
      000177 12r00r84         [24]  953 	lcall	_UART0_ClearFlag
      00017A D0 07            [24]  954 	pop	ar7
                                    955 ;	lib/src/uart.c:137: --count;
      00017C 1F               [12]  956 	dec	r7
      00017D 80 CA            [24]  957 	sjmp	00109$
      00017F                        958 00112$:
                                    959 ;	lib/src/uart.c:139: }
      00017F 22               [24]  960 	ret
                                    961 	.area CSEG    (CODE)
                                    962 	.area CONST   (CODE)
                                    963 	.area XINIT   (CODE)
                                    964 	.area CABS    (ABS,CODE)
